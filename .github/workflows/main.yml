name: Release on Tag
on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
    branches: [ main, dev ]
  
jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      # We can access this values in the other jobs
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
      #sha_short: ${{ steps.vars.outputs.sha_short }}
    steps:
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d-%s')"
    - name: Get the version
      id: get_version
      run: echo ::set-output name=version::release-${{ steps.date.outputs.date }}
    - name: Create Release #issue in this step
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false

  build-windows:
    runs-on: windows-latest
    needs: [create-release]
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{ runner.os }}-Qt-${{ needs.create-release.outputs.version }}
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
    # This is required or cannot compile it
        arch: win64_mingw73
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        version: '5.12.8'
    - name: Makefile
      run: mkdir build/out && cd build && qmake -makefile -o Makefile CONFIG+="release" ../Qt_QML_Github_Action/Qt_QML_Github_Action.pro
    - name: MinGW libraries 
      run: cp "..\Qt\5.12.8\mingw73_64\bin\libgcc_s_seh-1.dll" ".\build\out" && cp "..\Qt\5.12.8\mingw73_64\bin\libstdc++-6.dll" ".\build\out" && cp "..\Qt\5.12.8\mingw73_64\bin\libwinpthread-1.dll" ".\build\out"
    - name: Build
    # windeployqt is required to find all the libraries, don't find the C++
      run: cd build && make && mv ./release/Qt_QML_Github_Action.exe ./out && cd out && windeployqt --qmldir ../../Qt_QML_Github_Action --compiler-runtime --no-svg --no-opengl-sw --no-angle --no-system-d3d-compiler Qt_QML_Github_Action.exe
    - name: Package project 
      # Path to the build is different in windows, also the command
      run: Compress-Archive -Path "build/out/*" -DestinationPath windows.zip
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./windows.zip
        asset_name: windows-${{ needs.create-release.outputs.version }}-rest_api.zip
        asset_content_type: application/zip

